import QUnit from 'qunit'
import VeDigraph from '../src/VeDigraph.js'
import VeDigraphDFS from '../src/VeDigraphDFS.js'

QUnit.test('VeDigraphDFS', assert => {
    const G = new VeDigraph(13)
    G.addEdge(4, 2)
    G.addEdge(2, 3)
    G.addEdge(3, 2)
    G.addEdge(6, 0)
    G.addEdge(0, 1)
    G.addEdge(2, 0)
    G.addEdge(11, 12)
    G.addEdge(12, 9)
    G.addEdge(9, 10)
    G.addEdge(9, 11)
    G.addEdge(7, 9)
    G.addEdge(10, 12)
    G.addEdge(11, 4)
    G.addEdge(4, 3)
    G.addEdge(3, 5)
    G.addEdge(6, 8)
    G.addEdge(8, 6)
    G.addEdge(5, 4)
    G.addEdge(0, 5)
    G.addEdge(6, 4)
    G.addEdge(6, 9)
    G.addEdge(7, 6)

    const sp0 = new VeDigraphDFS(G, 0)
    assert.ok(sp0.hasPathTo(0))
    assert.ok(sp0.hasPathTo(1))
    assert.ok(sp0.hasPathTo(2))
    assert.ok(sp0.hasPathTo(3))
    assert.ok(sp0.hasPathTo(4))
    assert.ok(sp0.hasPathTo(5))
    assert.notOk(sp0.hasPathTo(6))
    assert.notOk(sp0.hasPathTo(7))
    assert.notOk(sp0.hasPathTo(9))

    const sp69 = new VeDigraphDFS(G, [6, 9])
    assert.ok(sp69.hasPathTo(0))
    assert.ok(sp69.hasPathTo(8))
    assert.notOk(sp69.hasPathTo(7))

    const sp699 = new VeDigraphDFS(G, new Set([6, 9, 9]))
    assert.ok(sp699.hasPathTo(0))
    assert.ok(sp699.hasPathTo(8))
    assert.notOk(sp699.hasPathTo(7))
})
